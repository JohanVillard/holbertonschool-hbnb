{
  "swagger": "2.0",
  "basePath": "/",
  "paths": {
    "/api/v1/amenities/": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid input data"
          },
          "201": {
            "description": "Amenity successfully created"
          }
        },
        "summary": "Register a new amenity",
        "operationId": "post_amenity_list",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Amenity"
            }
          }
        ],
        "tags": ["Amenities"]
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of amenities retrieved successfully"
          }
        },
        "summary": "Retrieve a list of all amenities",
        "operationId": "get_amenity_list",
        "tags": ["Amenities"]
      }
    },
    "/api/v1/amenities/{amenity_id}": {
      "parameters": [
        {
          "name": "amenity_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Amenity not found"
          },
          "200": {
            "description": "Amenity details retrieved successfully"
          }
        },
        "summary": "Get amenity details by ID",
        "operationId": "get_amenity_resource",
        "tags": ["Amenities"]
      },
      "put": {
        "responses": {
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Amenity not found"
          },
          "200": {
            "description": "Amenity updated successfully"
          }
        },
        "summary": "Update an amenity's information",
        "operationId": "put_amenity_resource",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Amenity"
            }
          }
        ],
        "tags": ["Amenities"]
      }
    },
    "/api/v1/places/": {
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "400": {
            "description": "Invalid input data"
          },
          "201": {
            "description": "Place successfully created"
          }
        },
        "summary": "Create a new place",
        "operationId": "post_place_list",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Place"
            }
          }
        ],
        "tags": ["Places"]
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of places retrieved successfully"
          }
        },
        "summary": "Retrieve a list of all places",
        "operationId": "get_place_list",
        "tags": ["Places"]
      }
    },
    "/api/v1/places/{place_id}": {
      "parameters": [
        {
          "name": "place_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Place not found"
          },
          "200": {
            "description": "Place details retrieved successfully"
          }
        },
        "summary": "Get place details by ID",
        "operationId": "get_place_resource",
        "tags": ["Places"]
      },
      "put": {
        "responses": {
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Place not found"
          },
          "200": {
            "description": "Place details updated successfully"
          }
        },
        "summary": "Modify place details",
        "operationId": "put_place_resource",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Place"
            }
          }
        ],
        "tags": ["Places"]
      }
    },
    "/api/v1/places/{place_id}/add_amenity/{amenity_id}": {
      "parameters": [
        {
          "name": "place_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "amenity_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "404": {
            "description": "Place not found"
          },
          "200": {
            "description": "Place and amenity are now associated."
          }
        },
        "summary": "Associate an amenity to a place",
        "operationId": "post_place_amenity",
        "tags": ["Places"]
      }
    },
    "/api/v1/places/{place_id}/reviews": {
      "parameters": [
        {
          "name": "place_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Place not found or no reviews"
          },
          "200": {
            "description": "Place's reviews retrieved successfully"
          }
        },
        "summary": "Get places's reviews by ID",
        "operationId": "get_place_review",
        "tags": ["Places"]
      }
    },
    "/api/v1/reviews/": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid input data"
          },
          "201": {
            "description": "Review successfully created"
          }
        },
        "summary": "Register a new review",
        "operationId": "post_review_list",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "tags": ["Reviews"]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Any review found"
          },
          "200": {
            "description": "List of reviews retrieved successfully"
          }
        },
        "summary": "Retrieve a list of all reviews",
        "operationId": "get_review_list",
        "tags": ["Reviews"]
      }
    },
    "/api/v1/reviews/user/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "User not found or no reviews"
          },
          "200": {
            "description": "User's reviews retrieved successfully"
          }
        },
        "summary": "Get user reviews by ID",
        "operationId": "get_user_review",
        "tags": ["Reviews"]
      }
    },
    "/api/v1/reviews/{review_id}": {
      "parameters": [
        {
          "name": "review_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Review not found"
          },
          "200": {
            "description": "Display review details by ID."
          }
        },
        "summary": "Display review detail by ID",
        "operationId": "get_review_resource",
        "tags": ["Reviews"]
      },
      "put": {
        "responses": {
          "404": {
            "description": "Review not found"
          },
          "200": {
            "description": "Review details modified successfully"
          }
        },
        "summary": "Modify review detail by ID",
        "operationId": "put_review_resource",
        "tags": ["Reviews"]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "Review not found"
          },
          "204": {
            "description": "Review successfully deleted"
          }
        },
        "summary": "Delete review by ID",
        "operationId": "delete_review_resource",
        "tags": ["Reviews"]
      }
    },
    "/api/v1/users/": {
      "post": {
        "responses": {
          "400": {
            "description": "Email already registered"
          },
          "201": {
            "description": "User successfully created"
          }
        },
        "summary": "Register a new user",
        "operationId": "post_user_list",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "tags": ["Users"]
      },
      "get": {
        "responses": {
          "404": {
            "description": "User not found"
          },
          "200": {
            "description": "List of users retrieved successfully"
          }
        },
        "summary": "Retrieve a list of all users",
        "operationId": "get_user_list",
        "tags": ["Users"]
      }
    },
    "/api/v1/users/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "User not found"
          },
          "200": {
            "description": "User details retrieved successfully"
          }
        },
        "summary": "Get user details by ID",
        "operationId": "get_user_resource",
        "tags": ["Users"]
      },
      "put": {
        "responses": {
          "404": {
            "description": "User not found"
          },
          "200": {
            "description": "User details updated successfully"
          }
        },
        "summary": "Modify user details",
        "operationId": "put_user_resource",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/api/v1/users/{user_id}/reviews": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "User not found or no reviews"
          },
          "200": {
            "description": "User's reviews retrieved successfully"
          }
        },
        "summary": "Get user's reviews by ID",
        "operationId": "get_user_review",
        "tags": ["Users"]
      }
    }
  },
  "info": {
    "title": "HBnB API",
    "version": "1.0",
    "description": "HBnB Application API"
  },
  "produces": ["application/json"],
  "consumes": ["application/json"],
  "tags": [
    {
      "name": "Users",
      "description": "User operations"
    },
    {
      "name": "Places",
      "description": "Place operations"
    },
    {
      "name": "Amenities",
      "description": "Amenity operations"
    },
    {
      "name": "Reviews",
      "description": "Review operations"
    }
  ],
  "definitions": {
    "User": {
      "required": ["email", "first_name", "last_name"],
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the user"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the user"
        },
        "email": {
          "type": "string",
          "description": "Email of the user"
        }
      },
      "type": "object"
    },
    "Place": {
      "required": ["latitude", "longitude", "owner_id", "price", "title"],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the place"
        },
        "price": {
          "type": "number",
          "description": "Price per night"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the place"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the place"
        },
        "owner_id": {
          "type": "string",
          "description": "ID of the owner"
        },
        "description": {
          "type": "string",
          "description": "Description of the place"
        }
      },
      "type": "object"
    },
    "Amenity": {
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the amenity"
        }
      },
      "type": "object"
    },
    "Review": {
      "required": ["place_id", "rating", "text", "user_id"],
      "properties": {
        "text": {
          "type": "string",
          "description": "Text of the review"
        },
        "rating": {
          "type": "string",
          "description": "Rating of the review"
        },
        "place_id": {
          "type": "string",
          "description": "Place of the review"
        },
        "user_id": {
          "type": "string",
          "description": "User writing the review"
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  }
}
